<?php
// $Id$ 

/**
 * @file
 * Blink client linking module
 *
 * Blink provides an interface with API (both local and XML-RPC) for managing local 
 * keyword links inserted into body text.
 * This provides a foundation for integrating with a local or remotely maintained link building
 * campaign
 */
 
define(BLINK_VERSION, '1.1d');


/**
 * Implementation of hook_help() 
 */
function blink_help($path, $arg) {
  switch ($path) {
    case 'admin/help#blink':
      $output = '<p>'. t('The <em>Blink</em> module provides random keyword linking using a weighted distribution.') .'</p>';
      return $output;
  }
}

/**
 * Implementation of hook_menu()
 */
function blink_menu() { 
  $items['admin/settings/blink'] = array(
    'title' => t('Blink'),
    'description' => t('Blink Link Manager'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('blink_admin_settings_form', NULL),
    'access callback' => 'user_access',
    'file' => 'blink_admin.inc.php',
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/settings/blink/settings'] = array( 
    'title' => t('Settings'),
    'description' => t('Link Settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('blink_admin_settings_form', NULL),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'blink_admin.inc.php',
     'type'     => MENU_LOCAL_TASK,
     'weight' => -10,
  );
  $items['admin/settings/blink/report'] = array(
    'title' => t('Report'),
    'description' => t('Links Report'),
    'page callback' => 'blink_link_report',
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'blink_admin.inc.php',
     'type'     => MENU_LOCAL_TASK,
     'weight' => -5,
  );
  $items['admin/settings/blink/update'] = array(
    'title' => t('Request Update'),
    'description' => t('Request Update Now'),
    'page callback' => 'blink_force_update_now',
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'blink_admin.inc.php',
     'type'     => MENU_LOCAL_TASK,
     'weight' => -5,
  );
 return $items;
}

/**
 * Implementation of hook_cron()
 */
function blink_cron() {
  
 // check for goal updates via XML-RPC 
 blink_check_updates_crontask(); // cron tasks must be self-metered
}

/**
 * Implementation of hook_block() 
 */
function blink_block($op='list', $delta=0, $edit=array()) {
  switch ($op) {
    case 'list':

    case 'view':

    case 'configure':

    case 'save':

  }
}

/**
 * Implementation of hook_nodeapi()
 *
 * We're providing the markup filter here since we need node context
 */
function blink_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  // cache_clear_all("blink_page_{$node->nid}", 'cache_page');  for testing ONLY.
  switch ($op) {
    case 'delete':
      db_query("DELETE FROM {blink_links} WHERE nid = %d", $node->nid);
    case 'update':
      cache_clear_all("blink_page_{$node->nid}", 'cache_page');
      break;
    case 'view':
      include_once(drupal_get_path('module', 'blink') .'/blink_markup.inc.php');
      if (blink_node_selected_for_markup($node)) {
        if ($css_file = variable_get('blink_link_css_filepath', '')) drupal_add_css($css_file);
      }
     break;
    case 'alter':
      include_once(drupal_get_path('module', 'blink') .'/blink_markup.inc.php');
      if (blink_node_selected_for_markup($node)) {
        if ($body = blink_filter_keywords($node->body, $node->nid)) $node->body = $body;
        if ($teaser = blink_filter_keywords($node->teaser, $node->nid, TRUE)) $node->teaser = $teaser;
      }
     break;
  }
}

function _blink_text_markup($text, $nid=0) {
  include_once(drupal_get_path('module', 'blink') .'/blink_markup.inc.php');
  return blink_filter_keywords($text, $nid, TRUE);
}

/*
 * Loop through servers and check for updates if sufficient time has elapsed
 * Each check: every hour
 * Unregistered XML-RPC update: 4 hours
 * Registred XML-RPC update: 2 days
 */
function blink_check_updates_crontask() {
  if (variable_get('blink_last_check_updates', 0) < strtotime('1 hour ago')) {
    $servers = db_query("SELECT * FROM {blink_servers}");
    while ($server = db_fetch_array($servers)) {
      $do_update = FALSE;
      switch ($server['status']) {
        case 'unregistered':
          $do_update = (strtotime('5 minutes ago') > $server['last_updated']);
        break;
        case 'pending_approval': 
          $do_update = (strtotime('2 hours ago') > $server['last_updated']);
        break;
        case 'successful_update':
          $do_update = (strtotime('2 days ago') > $server['last_updated']);
        break;
        case 'failed_update':
          $do_update = (strtotime('6 hours ago') > $server['last_updated']);
        break;  
      }
      if ($do_update) {
        include_once(drupal_get_path('module', 'blink') .'/blink_update.inc.php');
        xmlc_blink_update_goals($server, BLINK_VERSION);
      }
    }
    variable_set('blink_last_check_updates', time());
  }
}

/*
 *  BLINK API - for external modules adding and removing goals
 */ 
 
function blink_get_keyword_goals($goal_source) {
 if ($query = db_query('SELECT * FROM {blink_goals} WHERE goal_source="%s"', $goal_source)) {
   while($row = db_fetch_array($query)) $result[] = $row;
   return $result; 
 } else return array(); 
}

function blink_delete_keyword_goal($goal, $goal_source) {
  db_query('DELETE FROM {blink_goals} WHERE gid=%d AND goal_source="%s"', $goal['gid'], $goal_source); 
}

function blink_update_keyword_goal($goal, $goal_source) {
  drupal_write_record('blink_goals', $goal, 'gid');
}

function blink_add_keyword_goal($phrase, $page, $weight, $goal_source) {
  if (!(int) $weight || !trim($phrase) || !trim($page) || !trim($goal_source)) return FALSE; 
  $goal['kw'] = trim($phrase);
  $goal['url'] = is_integer($page) ? url('node/'.$page, array('absolute'=>TRUE)) : $page;
  $goal['weight'] = (int) $weight;
  $goal['blsid'] = $blsid ? $blsid : db_result(db_query('SELECT blsid FROM {blink_servers} WHERE server="local"'));
  
  // finally, add or update the modified record 
  $goal['url'] = trim(url($goal['url'], array('absolute')),'/');  
  $goal['goal_updated'] = time();
  $goal['goal_source'] = $goal_source;  
  $goal['goal_uid'] = uniqid('G', TRUE);  
  
  // where is local weight calculated?  
  drupal_write_record('blink_goals', $goal);  
}
