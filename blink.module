<?php
// $Id$

/**
 * @file
 * Blink client linking module
 *
 * Blink provides an interface with API (both local and XML-RPC) for managing local
 * keyword links inserted into body text.
 * This provides a foundation for integrating with a local or remotely maintained link building
 * campaign
 */

define('BLINK_VERSION', '1.1d');

if (!function_exists('db_fetch_array')) {
  function db_fetch_array($query) {
    if (is_object($query)) return $query->fetchAssoc();
  }
}
if (!function_exists('db_value')) {
  function db_value($query) {
    if (is_object($query)) return $query->fetchField();
  }
}


/**
 * Implements hook_help() ().
 */
function blink_help($path, $arg) {
  switch ($path) {
    case 'admin/help#blink':
      $output = '<p>' . t('The <em>Blink</em> module provides random keyword linking using a weighted distribution.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function blink_menu() {
  $items['admin/config/blink'] = array(
    'title' => 'Blink',
    'description' => 'Blink Link Manager',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('blink_admin_settings_form', NULL),
    'access callback' => 'user_access',
    'file' => 'blink_admin.inc',
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/config/blink/settings'] = array(
    'title' => 'Settings',
    'description' => 'Link Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('blink_admin_settings_form', NULL),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'blink_admin.inc',
    'type'     => MENU_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/config/blink/report'] = array(
    'title' => 'Report',
    'description' => 'Links Report',
    'page callback' => 'blink_link_report',
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'blink_admin.inc',
    'type'     => MENU_LOCAL_TASK,
    'weight' => -5,
  );
  /*
  $items['admin/config/blink/update'] = array(
    'title' => 'Request Update',
    'description' => 'Request Update Now',
    'page callback' => 'blink_force_update_now',
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'blink_admin.inc',
    'type'     => MENU_LOCAL_TASK,
    'weight' => -5,
  ); */
  return $items;
}

/**
 * Implements hook_cron().
 */
function blink_cron() {

  // check for goal updates via XML-RPC
  blink_check_updates_crontask(); // cron tasks must be self-metered
}

/**
 * Implements hook_block_info().
 */
function blink_block_info() { }

/**
 * Implements hook_block_view().
 */
function blink_block_view($delta) { }

/**
 * Implements hook_block_configure().
 */
function blink_block_configure($delta) { }

/**
 * Implements hook_block_save().
 */
function blink_block_save($delta, $edit) { }

/**
 * Implements hook_block() ().
 */
function blink_block_OLD($op = 'list', $delta = 0, $edit = array()) { }

/**
 * Implements hook_node_delete().
 */
function blink_node_delete($node) { 
  /* db_query("DELETE FROM {blink_links} WHERE nid = %d", $node->nid) */
  db_delete('blink_links')->condition('nid', $node->nid)->execute();
}

/**
 * Implements hook_node_update().
 */
function blink_node_update($node) {
  cache_clear_all("blink_page_{$node->nid}", 'cache_page');
}

/**
 * Implements hook_node_view().
 */
function blink_node_view($node, $view_mode = 'full') {
  include_once('blink_markup.inc');
  if (blink_node_selected_for_markup($node)) {
    if ($css_file = variable_get('blink_link_css_filepath', '')) {
      drupal_add_css($css_file);
    }
  }
}

/**
 * Implements hook_node_build_alter().
 */
function blink_node_build_alter($build) {
  include_once('blink_markup.inc');
  if (blink_node_selected_for_markup($node)) {
    if ($body = blink_filter_keywords($node->body, $node->nid)) {
      $node->body = $body;
    }
    if ($teaser = blink_filter_keywords($node->teaser, $node->nid, TRUE)) {
      $node->teaser = $teaser;
    }
  }
}

/**
 * Implements hook_nodeapi().
 *
 * We're providing the markup filter here since we need node context
 */
function blink_nodeapi_OLD(&$node, $op, $a3 = NULL, $a4 = NULL) {
  // TODO Remaining code in this function needs to be moved to the appropriate new hook function.
  // cache_clear_all("blink_page_{$node->nid}", 'cache_page');  for testing ONLY.
}

function _blink_text_markup($text, $nid = 0) {
  include_once('blink_markup.inc');
  return blink_filter_keywords($text, $nid, TRUE);
}

/*
 * Loop through servers and check for updates if sufficient time has elapsed
 * Each check: every hour
 * Unregistered XML-RPC update: 4 hours
 * Registred XML-RPC update: 2 days
 */
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function blink_check_updates_crontask() {
  if (variable_get('blink_last_check_updates', 0) < strtotime('1 hour ago')) {
    $servers = db_query("SELECT * FROM {blink_servers}");
    while ($server = db_fetch_array($servers)) {
      $do_update = FALSE;
      switch ($server['status']) {
        case 'unregistered':
          $do_update = (strtotime('5 minutes ago') > $server['last_updated']);
          break;
        case 'pending_approval':
          $do_update = (strtotime('2 hours ago') > $server['last_updated']);
          break;
        case 'successful_update':
          $do_update = (strtotime('2 days ago') > $server['last_updated']);
          break;
        case 'failed_update':
          $do_update = (strtotime('6 hours ago') > $server['last_updated']);
          break;
      }
      if ($do_update) {
        include_once('blink_update.inc');
        xmlc_blink_update_goals($server, BLINK_VERSION);
      }
    }
    variable_set('blink_last_check_updates', REQUEST_TIME);
  }
}

/*
 *  BLINK API - for external modules adding and removing goals
 */

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function blink_get_keyword_goals($goal_source) {
  $result = array();
  if ($query = db_query('SELECT * FROM {blink_goals} WHERE goal_source = :goal_source', array(':goal_source' => $goal_source))) {
    while ($row = db_fetch_array($query)) $result[] = $row; 
  } 
  return $result;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function blink_delete_keyword_goal($goal, $goal_source) {
  // TODO Please review the conversion of this statement to the D7 database API syntax.
  /* db_query('DELETE FROM {blink_goals} WHERE gid=%d AND goal_source="%s"', $goal['gid'], $goal_source) */
  db_delete('blink_goals')->condition('gid', $goal['gid'])->condition('goal_source', $goal_source)->execute();
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function blink_update_keyword_goal($goal, $goal_source) {
  drupal_write_record('blink_goals', $goal, 'gid');
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function blink_add_keyword_goal($phrase, $page, $weight, $goal_source) {
  if (!(int) $weight || !trim($phrase) || !trim($page) || !trim($goal_source))  return FALSE; 
  $goal['kw'] = trim($phrase);
  $goal['url'] = is_integer($page) ? url('node/' . $page, array('absolute' => TRUE)) : $page;
  $goal['weight'] = (int) $weight;
  $goal['blsid'] = $blsid ? $blsid : db_query('SELECT blsid FROM {blink_servers} WHERE server = :server', array(':server' => "local"))->fetchField();

  // finally, add or update the modified record
  $goal['url'] = trim(url($goal['url'], array('absolute')), '/');
  $goal['goal_updated'] = REQUEST_TIME;
  $goal['goal_source'] = $goal_source;
  $goal['goal_uid'] = uniqid('b', TRUE);

  // where is local weight calculated?
  drupal_write_record('blink_goals', $goal);
}
